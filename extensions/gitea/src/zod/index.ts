import { z } from "zod";

export const organization = z.object({
  id: z.number(),
  name: z.string(),
  full_name: z.string(),
  email: z.string().optional(),
  avatar_url: z.string().url(),
  description: z.string(),
  website: z.string(),
  location: z.string(),
  visibility: z.string(),
  repo_admin_change_team_access: z.boolean().optional(),
  username: z.string(),
});

export const user = z.object({
  id: z.number(),
  login: z.string(),
  login_name: z.string(),
  source_id: z.number(),
  full_name: z.string(),
  email: z.string(),
  avatar_url: z.string().url(),
  html_url: z.string().url(),
  language: z.string(),
  is_admin: z.boolean(),
  last_login: z.string().datetime(),
  created: z.string().datetime(),
  restricted: z.boolean(),
  active: z.boolean(),
  prohibit_login: z.boolean(),
  location: z.string(),
  website: z.string(),
  description: z.string(),
  visibility: z.string(),
  followers_count: z.number(),
  following_count: z.number(),
  starred_repos_count: z.number(),
  username: z.string(),
});

export const milestone = z.object({
  id: z.number(),
  title: z.string(),
  description: z.string(),
  state: z.string(),
  open_issues: z.number(),
  closed_issues: z.number(),
  created_at: z.string().datetime(),
  updated_at: z.string().datetime(),
  closed_at: z.string().nullable(),
  due_on: z.string().nullable(),
});

export const repository = z.object({
  id: z.number(),
  name: z.string(),
  full_name: z.string(),
  owner: user,
  description: z.string(),
  empty: z.boolean(),
  private: z.boolean(),
  fork: z.boolean(),
  template: z.boolean(),
  parent: z.unknown().nullable(),
  mirror: z.boolean(),
  size: z.number(),
  language: z.string().nullable(),
  languages_url: z.string().url(),
  html_url: z.string().url(),
  url: z.string().url(),
  ssh_url: z.string(),
  clone_url: z.string(),
  original_url: z.string(),
  website: z.string(),
  stars_count: z.number(),
  forks_count: z.number(),
  watchers_count: z.number(),
  open_issues_count: z.number(),
  open_pr_counter: z.number(),
  release_counter: z.number(),
  default_branch: z.string(),
  archived: z.boolean(),
  created_at: z.string().datetime(),
  updated_at: z.string().datetime(),
  archived_at: z.string().datetime(),
  permissions: z.object({
    admin: z.boolean(),
    push: z.boolean(),
    pull: z.boolean(),
  }),
  has_issues: z.boolean(),
  internal_tracker: z.object({
    enable_time_tracker: z.boolean(),
    allow_only_contributors_to_track_time: z.boolean(),
    enable_issue_dependencies: z.boolean(),
  }),
  has_wiki: z.boolean(),
  has_pull_requests: z.boolean(),
  has_projects: z.boolean(),
  projects_mode: z.string(),
  has_releases: z.boolean(),
  has_packages: z.boolean(),
  has_actions: z.boolean(),
  ignore_whitespace_conflicts: z.boolean(),
  allow_merge_commits: z.boolean(),
  allow_rebase: z.boolean(),
  allow_rebase_explicit: z.boolean(),
  allow_squash_merge: z.boolean(),
  allow_fast_forward_only_merge: z.boolean(),
  allow_rebase_update: z.boolean(),
  default_delete_branch_after_merge: z.boolean(),
  default_merge_style: z.string(),
  default_allow_maintainer_edit: z.boolean(),
  avatar_url: z.string(),
  internal: z.boolean(),
  mirror_interval: z.string(),
  object_format_name: z.string(),
  mirror_updated: z.string().datetime(),
  repo_transfer: z.unknown().nullable(),
});
export const issue = z.object({
  id: z.number(),
  url: z.string().url(),
  html_url: z.string().url(),
  number: z.number(),
  user: user,
  original_author: z.string(),
  original_author_id: z.number(),
  title: z.string(),
  body: z.string(),
  ref: z.string(),
  assets: z.array(z.unknown()),
  labels: z.array(z.unknown()),
  milestone: milestone.nullable(),
  assignee: z.unknown().nullable(),
  assignees: z.unknown().nullable(),
  state: z.enum(["open", "closed"]),
  is_locked: z.boolean(),
  comments: z.number(),
  created_at: z.string().datetime(),
  updated_at: z.string().datetime(),
  closed_at: z.string().nullable(),
  due_date: z.string().nullable(),
  pull_request: z
    .object({
      merged: z.boolean(),
      merged_at: z.string().datetime().nullable(),
      draft: z.boolean(),
      html_url: z.string(),
    })
    .nullable(),
  repository: z.object({
    id: z.number(),
    name: z.string(),
    owner: z.string(),
    full_name: z.string(),
  }),
  pin_order: z.number(),
});

export const registryPackage = z.object({
  id: z.number(),
  type: z.string(),
  name: z.string(),
  version: z.string(),
  html_url: z.string(),
  repository: repository.nullable(),
  creator: user,
  owner: user,
  created_at: z.string().datetime(),
});

export const label = z.object({
  id: z.number(),
  name: z.string(),
  exclusive: z.boolean(),
  is_archived: z.boolean(),
  color: z.string(),
  description: z.string(),
  url: z.string(),
});

export type Label = z.infer<typeof label>;
export type Package = z.infer<typeof registryPackage>;
export type Organization = z.infer<typeof organization>;
export type Issue = z.infer<typeof issue>;
export type User = z.infer<typeof user>;
export type Milestone = z.infer<typeof milestone>;
export type Repository = z.infer<typeof repository>;
